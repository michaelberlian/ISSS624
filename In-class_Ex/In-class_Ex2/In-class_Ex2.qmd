---
title: "In-class Exercise 2"
date: "25 November 2023"
date-modified: "last-modified"
---

# Spatial Weight

## Getting Started

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse, knitr, plotly)
```

## Importing Data

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
GDPPC <- read_csv("data/aspatial/hunan_GDPPC.csv")
```

zipping value and shapefile

```{r}
hunan_GDPPC <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## Deriving Spatial Weights: Queen's Method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate (nb = st_contiguity(geometry),
          wt = st_weights(nb,
                          style = "W"),
          .before = 1)
```

## Moran's I 

```{r}
lisa <- wm_q %>%
  mutate (local_moran = local_moran(
    GDPPC, nb, wt, nsim =99),
          .before = 1) %>%
  unnest(local_moran)
```

## Time Series Cube

utilising sfdep()

```{r}
GDPPC_st <- spacetime(GDPPC, hunan,
                      .loc_col = "County",
                      .time_col = "Year")
```

checking the spacetime cube

```{r}
is_spacetime_cube(GDPPC_st)
```

## GI\*

```{r}
GDPPC_nb <- GDPPC_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(st_contiguity(geometry)),
         wt = st_inverse_distance(nb, geometry,
                                  scale = 1,
                                  alpha = 1),
         .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

```{r}
gi_stars <- GDPPC_nb %>%
  group_by(Year) %>%
  mutate(gi_star = local_gstar_perm(
    GDPPC, nb, wt)) %>%
  tidyr::unnest(gi_star)
```

```{r}

```

## Emerging Hotsport Analysis

```{r}
ehsa <- emerging_hotspot_analysis(
  x = GDPPC_st,
  .var = "GDPPC",
  k = 1,
  nsim = 99
)
```

```{r}
ggplot(data = ehsa,
       aes(x = classification)) +
  geom_bar()
```

## Visualising

```{r}
hunan_ehsa <- hunan %>%
  left_join(ehsa,
            by = join_by(County == location))
```

```{r}
ehsa_sig <- hunan_ehsa %>%
  filter(p_value <0.05)
tmap_mode("plot")
tm_shape(hunan_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
  tm_fill("classification") +
tm_borders(alpha = 0.4)
```
