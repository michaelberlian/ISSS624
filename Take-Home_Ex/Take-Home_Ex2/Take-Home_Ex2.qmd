---
title: "Take-Home Exercise 2"
date: "9 December 2023"
date-modified: "last-modified"
---

## Getting started

importing package to accommodate data wrangling and visualisation

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse, stplanr, sp, reshape2, httr, performance)
```

## Data Preparation

Importing several data for analysis

### Bus Stop

importing Bus stop locations

```{r}
busStops <- st_read(dsn = "data/geospatial",
                 layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
tmap_mode("view")
tm_shape(busStops) +
  tm_dots() +
tm_view(set.zoom.limits = c(11,14))

tmap_mode("plot")
```

### Creating Hexagonal Grid

creating hexagonal grid as the base of analysis. The grid size is 750m, the distance between parallel edges.

```{r}
grid = st_make_grid(busStops, c(750), what = "polygons", square = FALSE)
# To sf and add grid ID
grid_sf = st_sf(grid) %>%
  # add grid ID
  mutate(grid_id = 1:length(lengths(grid)))
```

```{r}
grid_sf$n_colli = lengths(st_intersects(grid_sf, busStops))

# remove grid without value of 0 (i.e. no points in side that grid)
grid_count = filter(grid_sf,n_colli > 0 )
```

```{r}
tmap_mode("view")

tm_shape(grid_count) +
  tm_fill(
    col = "n_colli",
    palette = "Blues",
    style = "cont",
    title = "Number of collisions",
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of collisions: " = "n_colli"
    ),
    popup.format = list(
      n_colli = list(format = "f", digits = 0)
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7) +
tm_view(set.zoom.limits = c(11,14))

tmap_mode("plot")
```

removing bus stop outside of Singapore

```{r}
#| eval: false
grid_count_rm <- grid_count %>%
  filter(!grid_id == 942,
         !grid_id == 984,
         !grid_id == 819)
```

saving grid to RDS

```{r}
#| eval: false
write_rds(grid_count_rm, "data/rds/grid.rds")
rm(list = c('grid_count','grid_count_rm','grid_sf'))
```

Reload Grid

```{r}
grid = read_rds('data/rds/grid.rds')
```

### Trip Data

importing trip data for trips analysis

```{r}
busTrips <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
# busTrips <- read_csv("data/aspatial/origin_destination_bus_202309.csv")
# busTrips <- read_csv("data/aspatial/origin_destination_bus_202310.csv")

busTrips$ORIGIN_PT_CODE <- as.factor(busTrips$ORIGIN_PT_CODE)
busTrips$DESTINATION_PT_CODE <- as.factor(busTrips$DESTINATION_PT_CODE)
```

### MPSZ Data

importin mpsz data for visualisation

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                 layer = "MP14_SUBZONE_WEB_PL") %>%
  st_transform(crs = 3414)
```

```{r}
tmap_mode('plot')
tm_shape(mpsz) +
  tm_polygons(col='grey', border.alpha = 0.1) +
tm_shape(grid) +
  tm_fill(
    col = "n_colli",
    palette = "Blues",
    style = "cont",
    title = "Number of collisions",
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of collisions: " = "n_colli"
    ),
    popup.format = list(
      n_colli = list(format = "f", digits = 0)
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
```

### Population data based on HDB

from HDB data, proxy population was counted from total dwelling units. This population will be used as propulsiveness data.

```{r}
hdb <- read_csv('data/aspatial/hdb.csv')
```

```{r}
hdb_sf <- hdb %>%
  rename(latitude = lat, 
         longitude = lng) %>%
  select(latitude, longitude, total_dwelling_units) %>%
  st_as_sf(coords = c('longitude','latitude'), 
           crs=4326) %>%
  st_transform(crs = 3414)
```

### Business, Retail, and School Data

business and retail dataset will be used as attractiveness data.

```{r}
business <- st_read(dsn = "data/geospatial",
                 layer = "Business") %>%
  st_transform(crs = 3414)
retail <- st_read(dsn = "data/geospatial",
                  layer = "Retails") %>%
  st_transform(crs = 3414)
```

the geospatial school data will be retrieve using the postal code. By geocoding using onemap API. The General information of school csv will contain the postal code and using the onemap API, it will retrieve and give us the longitude and latitude coordinate of the school. The schools postcode where the API could not retrieve the coordinate will be stored at not_found and later be filled manually.

```{r}
#| eval: false
url <- "https://www.onemap.gov.sg/api/common/elastic/search"

csv <- read_csv('data/aspatial/Generalinformationofschools.csv')
postcodes <- csv$postal_code

found <- data.frame()
not_found <- data.frame()

for(postcode in postcodes){
  query <- list('searchVal'=postcode, 'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')
  res <- GET(url,query=query)
  
  if((content(res)$found) != 0){
    found <- rbind(found,data.frame(content(res))[4:13])
  } else {
    not_found <- data.frame(postcode)
  }
}
```

```{r}
#| eval: false
merged <- merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)
write.csv(merged, file = 'data/aspatial/schools.csv')
write.csv(not_found, file = 'data/aspatial/not_found.csv')
```

```{r}
schools <- read_csv(file = 'data/aspatial/schools.csv')
schools <- schools %>%
  rename(latitude = results.LATITUDE, 
         longitude = results.LONGITUDE) %>%
  select(postal_code, school_name, latitude, longitude)
```

transforming the data from longitude and latitude data into geometry

```{r}
schools_sf <- st_as_sf(schools, 
                       coords = c('longitude','latitude'), 
                       crs=4326) %>%
  st_transform(crs = 3414)
```

## OD Flow

### Trip count

calculating trip count of weekday morning

```{r}
#| eval: false
busTripsDayMorning <- busTrips %>%
  filter(DAY_TYPE == "WEEKDAY", 
         TIME_PER_HOUR >= 6, 
         TIME_PER_HOUR <= 9) %>%
  select(ORIGIN_PT_CODE,DESTINATION_PT_CODE,TOTAL_TRIPS) %>%
  rename(DESTIN_PT_CODE = DESTINATION_PT_CODE)
```

### Creating the Flow Data

making object to represent bus stop location to a grid

```{r}
#| eval: false
busStops_grid <- st_intersection(busStops, grid) %>%
  select(BUS_STOP_N, grid_id) %>%
  st_drop_geometry()
```

we are going to change the trips identity from bus stops code to grid id

```{r}
#| eval: false
od_data <- left_join(busTripsDayMorning , busStops_grid,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_GRID = grid_id,
         DESTIN_BS = DESTIN_PT_CODE)
```

removing duplicates

```{r}
#| eval: false
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
#| eval: false
od_data <- unique(od_data)
```

```{r}
#| eval: false
od_data <- left_join(od_data , busStops_grid,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
#| eval: false
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
#| eval: false
od_data <- unique(od_data)
```

grouping the trips based on origin grid and destination grid

```{r}
#| eval: false
od_data <- od_data %>%
  rename(DESTIN_GRID = grid_id) %>%
  drop_na() %>%
  group_by(ORIGIN_GRID, DESTIN_GRID) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
#| eval: false
write_rds(od_data, "data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

Creating the flow

first, we remove intra zonal flow

```{r}
od_data1 <- od_data[od_data$ORIGIN_GRID!=od_data$DESTIN_GRID,]
```

```{r}
flowLine <- od2line(flow = od_data1, 
                    zones = grid,
                    zone_code = "grid_id")
```

### Visualising O-D Flow

O-D Flow unfiltered

```{r}
tm_shape(mpsz) +
  tm_polygons(col = 'grey', border.alpha = 0.1) +
tm_shape(grid) +
  tm_polygons() +
flowLine %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

O-D Flow filtered for 10000 or more trips

```{r}
tm_shape(mpsz) +
  tm_polygons(col = 'grey', border.alpha = 0.1) +
tm_shape(grid) +
  tm_polygons() +
flowLine %>%  
  filter(TRIPS >= 10000) %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

O-D Flow filtered for 30000 or more trips

```{r}
tm_shape(mpsz) +
  tm_polygons(col = 'grey', border.alpha = 0.1) +
tm_shape(grid) +
  tm_polygons() +
flowLine %>%  
  filter(TRIPS >= 30000) %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(3, 5, 7, 10),
           n = 4,
           alpha = 0.3)
```

## Spatial Interaction Model Data Preparation

### Propulsiveness Data Wrangling

there will be 3 propulsiveness variable embedded into the origin grid, they are:

1.  Population per grid

    total number of dwelling will be a representation of the number of population in the grid

    ```{r}
    #| eval: false
    grid_prop <- st_join(hdb_sf,grid, join = st_within) %>%
      select(total_dwelling_units, grid_id) %>%
      st_drop_geometry() %>%
      rename(POPULATION_COUNT = total_dwelling_units)
    grid_prop <- grid %>%
      left_join(grid_prop, by = c('grid_id' = 'grid_id')) 

    grid_prop$POPULATION_COUNT <- ifelse(
      is.na(grid_prop$POPULATION_COUNT),
      0.99, grid_prop$POPULATION_COUNT)

    grid_prop$POPULATION_COUNT <- ifelse(
      grid_prop$POPULATION_COUNT == 0,
      0.99, grid_prop$POPULATION_COUNT)

    grid_prop <- grid_prop %>%
      group_by(grid_id, n_colli) %>%
      summarise(POPULATION_COUNT = sum(POPULATION_COUNT))
    ```

2.  Number of HDB per grid

    Number of HDB per grid will be counted by using intersection between HDB point with the grid hexagonal polygon

    ```{r}
    #| eval: false
    grid_prop$HDB_COUNT <- lengths (
      st_intersects(
        grid,hdb_sf))

    grid_prop$HDB_COUNT <- ifelse(
      grid_prop$HDB_COUNT == 0,
      0.99, grid_prop$HDB_COUNT)
    ```

3.  Number of Bus Station per grid

    Number of bus station per grid will be using the number of collision computed previously when previewing the hexagons

    ```{r}
    #| eval: false
    grid_prop <- grid_prop %>%
      st_drop_geometry() %>%
      rename(BUS_N = n_colli)

    grid_prop$BUS_N <- ifelse(
      grid_prop$BUS_N == 0,
      0.99, grid_prop$BUS_N)
    ```

    ```{r}
    #| eval: false
    write_rds(grid_prop,'data/rds/grid_prop.rds')
    ```

    ```{r}
    grid_prop <- read_rds('data/rds/grid_prop.rds')
    ```

putting all the propulsiveness variable into flow data

```{r}
flowLine <- flowLine %>%
left_join(grid_prop, by = c('ORIGIN_GRID' = 'grid_id'))
```

```{r}
grid_plot <- grid %>%
  select(grid_id) %>%
  left_join(grid_prop)

tm_shape(mpsz) +
  tm_polygons(col = 'grey', border.alpha = 0.1) +
tm_shape(grid_plot) +
  tm_fill(
    col = "POPULATION_COUNT",
    palette = "Blues",
    style = "cont",
    title = "Number of Bus Station",
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
  ) +
  tm_borders(col = "grey40", lwd = 0.7) +
flowLine %>%  
  filter(TRIPS >= 10000) %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3) 
```

### Attractiveness Data Wrangling

there will be 3 attractiveness variable embedded into the destination grid, they are:

1.  Number of School per grid

    Number of School per grid will be counted by using intersection between school point with the grid hexagonal polygon

    ```{r}
    #| eval: false
    grid_att <- grid %>%
      select (-c(n_colli)) %>%
      st_drop_geometry()
    grid_att$SCHOOL_COUNT <- lengths(
      st_intersects(grid,schools_sf)
    )

    grid_att$SCHOOL_COUNT <- ifelse(
      grid_att$SCHOOL_COUNT == 0,
      0.99, grid_att$SCHOOL_COUNT)
    ```

2.  Number of Business per grid

    Number of Business per grid will be counted by using intersection between business point with the grid hexagonal polygon

    ```{r}
    #| eval: false
    grid_att$BUSINESS_COUNT <- lengths(
      st_intersects(grid,business)
    )

    grid_att$BUSINESS_COUNT <- ifelse(
      grid_att$BUSINESS_COUNT == 0,
      0.99, grid_att$BUSINESS_COUNT)
    ```

3.  Number of Retail per grid

    Number of Retail per grid will be counted by using intersection between retail point with the grid hexagonal polygon

    ```{r}
    #| eval: false
    grid_att$RETAIL_COUNT <- lengths(
      st_intersects(grid,retail)
    )

    grid_att$RETAIL_COUNT <- ifelse(
      grid_att$RETAIL_COUNT == 0,
      0.99, grid_att$RETAIL_COUNT
    )
    ```

    ```{r}
    #| eval: false
    write_rds(grid_att, "data/rds/grid_att.rds") 
    ```

    ```{r}
    grid_att <- read_rds('data/rds/grid_att.rds')
    ```

putting all the attractiveness variable into flow data

```{r}
flowLine <- flowLine %>%
left_join(grid_att, by = c('DESTIN_GRID' = 'grid_id'))
```

### Calculating the distance between grid

making the grids into spatial and contain column grid id and the geomtery

```{r}
#| eval: false
grid_sp <- grid %>%
  select (-c(n_colli)) %>%
  as('Spatial')
grid_sp
```

using spDists function of sp package to calculate the distance between polygon centroid creating a matrix

```{r}
#| eval: false
dist <- spDists(grid_sp, 
                longlat = FALSE)

head(dist, n=c(10, 10))
```

getting the grid_id to label the matrix column and row

```{r}
#| eval: false
grid_ids <- grid_sp$grid_id
```

```{r}
#| eval: false
colnames(dist) <- paste0(grid_ids)
rownames(dist) <- paste0(grid_ids)
```

using melt to transfrom the matrix into column based for easier join with the main flow data

```{r}
#| eval: false
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

view the summary of distPair and then change the minimum value of 0 to 50 for the intra-zonal distance to prevent error in modelling.

```{r}
#| eval: false
distPair %>%
  filter(dist > 0) %>%
  summary()

distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)

distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

```{r}
#| eval: false
write_rds(distPair, "data/rds/distPair.rds") 
```

```{r}
distPair <- read_rds('data/rds/distPair.rds')
summary(distPair)
```

getting the distance column into flow data

```{r}
flowLine <- flowLine %>%
left_join(distPair, by = c('DESTIN_GRID' = 'dest', 'ORIGIN_GRID' = 'orig'))
```

saving the flow data after combining all the needed variable

```{r}
#| eval: false
write_rds(flowLine, "data/rds/flowData.rds") 
```

```{r}
flowData <- read_rds("data/rds/flowData.rds")
```

## Building Spatial Interaction Models

### Unconstrained Model

```{r}
uncSIM <- glm(formula = TRIPS ~ 
                log(POPULATION_COUNT) +
                log(HDB_COUNT) +
                log(BUS_N) +
                log(BUSINESS_COUNT) +
                log(RETAIL_COUNT) +
                log(SCHOOL_COUNT) +
                log(dist),
              family = poisson(link = "log"),
              data = flowData,
              na.action = na.exclude)
summary(uncSIM)
```

### Origin Constrained Model

```{r}
orcSIM <- glm(formula = TRIPS ~ 
                ORIGIN_GRID +
                log(BUSINESS_COUNT) +
                log(RETAIL_COUNT) +
                log(SCHOOL_COUNT) +
                log(dist),
              family = poisson(link = "log"),
              data = flowData,
              na.action = na.exclude)
summary(orcSIM)
```

### Destination Constrained Model

```{r}
decSIM <- glm(formula = TRIPS ~ 
                log(POPULATION_COUNT) +
                log(HDB_COUNT) +
                log(BUS_N) +
                DESTIN_GRID +
                log(dist),
              family = poisson(link = "log"),
              data = flowData,
              na.action = na.exclude)
summary(decSIM)
```

### Doubly Constrained Model

```{r}
dbcSIM <- glm(formula = TRIPS ~ 
                ORIGIN_GRID + 
                DESTIN_GRID + 
                log(dist),
              family = poisson(link = "log"),
              data = flowData,
              na.action = na.exclude)
summary(dbcSIM)
```

### Model Comparison

#### RMSE

```{r}
model_list <- list(unconstrained=uncSIM,
                   originConstrained=orcSIM,
                   destinationConstrained=decSIM,
                   doublyConstrained=dbcSIM)
```

```{r}
compare_performance(model_list,
                    metrics = "RMSE")
```

#### R-Squared

```{r}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated)
  R2 <- r^2
  R2
}
```

```{r}
CalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)
CalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)
CalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)
CalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)
```
